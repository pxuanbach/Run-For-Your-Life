{"version":3,"sources":["index.tsx"],"names":["useResolvedFontFamily","props","fontFamily","fontStyle","fontWeight","fontConfig","fontWeights","fonts","fontToken","parsedFontWeight","parseInt","fontWeightNumber","Number","isNaN","fontVariants","StyledText","NativeText","color","space","position","layout","flexbox","border","typography","customPosition","customBorder","customBackground","customOutline","customShadow","customExtra","customLayout","customTypography","Text","ref","children","isTruncated","noOfLines","bold","italic","sub","highlight","underline","strikeThrough","propFontFamily","propFontWeight","propFontStyle","_hover","fontSize","reslovedProps","_ref","isHovered","resolvedFontFamily","undefined","bg","textDecorationLine"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef, useRef } from 'react';\nimport { Text as NativeText } from 'react-native';\nimport { useTheme } from '../../../hooks';\nimport styled from 'styled-components/native';\nimport {\n  color,\n  position,\n  space,\n  typography,\n  layout,\n  flexbox,\n  border,\n} from 'styled-system';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport {\n  customBorder,\n  customBackground,\n  customOutline,\n  customLayout,\n  customExtra,\n  customShadow,\n  customTypography,\n  customPosition,\n} from '../../../utils/customProps';\nimport type { ITextProps } from './types';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils/mergeRefs';\n\ntype IUseResolvedFontFamily = {\n  fontFamily: string;\n  fontStyle: string;\n  fontWeight: string | number;\n};\n\n// Android doesn't support fontWeight or fontStyle properties. So, we pass fontFamily instead.\nfunction useResolvedFontFamily(props: IUseResolvedFontFamily) {\n  const { fontFamily, fontStyle, fontWeight } = props;\n\n  const { fontConfig, fontWeights, fonts } = useTheme();\n  const fontToken = fonts[fontFamily];\n\n  if (fontConfig && fontConfig[fontToken]) {\n    // fontWeights are also specified using \"400\"\n    const parsedFontWeight = parseInt(fontWeight as any);\n    let fontWeightNumber = Number.isNaN(parsedFontWeight)\n      ? fontWeights[fontWeight]\n      : fontWeight;\n    let fontVariants = fontConfig[fontToken][fontWeightNumber];\n    if (typeof fontVariants === 'object') {\n      if (fontVariants[fontStyle]) return fontVariants[fontStyle];\n    } else {\n      return fontVariants;\n    }\n  }\n}\n\nconst StyledText = styled(NativeText)<ITextProps>(\n  color,\n  space,\n  position,\n  layout,\n  flexbox,\n  border,\n  typography,\n  position,\n  customPosition,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customLayout,\n  customTypography\n);\n\nconst Text = ({ children, ...props }: ITextProps, ref: any) => {\n  const {\n    isTruncated,\n    noOfLines,\n    bold,\n    italic,\n    sub,\n    highlight,\n    underline,\n    strikeThrough,\n    fontFamily: propFontFamily,\n    fontWeight: propFontWeight,\n    fontStyle: propFontStyle,\n    _hover,\n    fontSize = 'md',\n    ...reslovedProps\n  } = usePropsResolution('Text', props);\n\n  const _ref = useRef(null);\n  // TODO: might have to add this condition\n  const { isHovered } = useHover({}, _hover ? _ref : null);\n  // const { isHovered } = useHover({}, _ref);\n  let fontFamily = propFontFamily;\n  let fontStyle = italic ? 'italic' : propFontStyle;\n  let fontWeight = bold ? 'bold' : propFontWeight;\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight,\n    fontStyle,\n  });\n\n  if (resolvedFontFamily) {\n    fontFamily = resolvedFontFamily;\n  }\n\n  return (\n    <StyledText\n      {...reslovedProps}\n      numberOfLines={noOfLines ? noOfLines : isTruncated ? 1 : undefined}\n      fontWeight={bold ? 'bold' : fontWeight}\n      fontStyle={italic ? 'italic' : fontStyle}\n      bg={highlight ? 'warning.200' : reslovedProps.bg}\n      textDecorationLine={\n        underline\n          ? 'underline'\n          : strikeThrough\n          ? 'line-through'\n          : reslovedProps.textDecorationLine\n      }\n      fontSize={sub ? 10 : fontSize}\n      ref={mergeRefs([ref, _ref])}\n      fontFamily={fontFamily}\n      {...(isHovered && _hover)}\n    >\n      {children}\n    </StyledText>\n  );\n};\n\nexport default memo(forwardRef(Text));\nexport type { ITextProps };\n"]}