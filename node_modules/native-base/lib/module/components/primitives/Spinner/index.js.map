{"version":3,"sources":["index.tsx"],"names":["StyledSpinner","ActivityIndicator","color","space","position","Spinner","props","ref","newProps","spinnerColor","spinnerProps"],"mappings":"wUAAA,qDACA,yCACA,wEACA,2CACA,2DACA,qCAEA,yC,mIAmBA,GAAMA,CAAAA,aAAa,CAAG,oBAAOC,8BAAP,EACpBC,mBADoB,CAEpBC,mBAFoB,CAGpBC,sBAHoB,CAAtB,CAKA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAuBC,GAAvB,CAAoC,CAClD,GAAMC,CAAAA,QAAQ,CAAG,sCAAmB,SAAnB,CAA8BF,KAA9B,CAAjB,CACA,GAAMG,CAAAA,YAAY,CAAG,oBAAS,QAAT,CAAmBD,QAAQ,CAACN,KAA5B,CAArB,CAFkD,gBAGzB,4BAAWI,KAAX,CAHyB,CAG1CI,YAH0C,aAG1CA,YAH0C,CA6BlD,MACE,8BAAC,aAAD,0BACMA,YADN,CAEMF,QAFN,EAGE,KAAK,CAAEC,YAHT,CAIE,GAAG,CAAEF,GAJP,8EADF,CAiED,CA9FD,C,aAgGe,gBAAK,sBAAWF,OAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport styled from 'styled-components/native';\nimport { color, space, position } from 'styled-system';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useToken } from '../../../hooks';\nimport type { ISpinnerProps } from './types';\nimport { useSpinner } from './useSpinner';\n// import type { IBoxProps } from '../Box';\n// import { customLayout, customPosition } from '../../../utils/customProps';\n// import {\n//   Default,\n//   Dotted,\n//   MultiColorDotted,\n//   Stroked,\n//   SquareDotted,\n// } from './variants';\n\n// const StyleAnimatedView = styled(Animated.View)<IBoxProps>(\n//   color,\n//   border,\n//   position,\n//   customPosition,\n//   customLayout\n// );\n\nconst StyledSpinner = styled(ActivityIndicator)<ISpinnerProps>(\n  color,\n  space,\n  position\n);\nconst Spinner = (props: ISpinnerProps, ref: any) => {\n  const newProps = usePropsResolution('Spinner', props);\n  const spinnerColor = useToken('colors', newProps.color);\n  const { spinnerProps } = useSpinner(props);\n  // const iconSize: any = { sm: 10, lg: 20 };\n\n  // const degree: any = new Animated.Value(0);\n  // Animated.loop(\n  //   Animated.timing(degree, {\n  //     toValue: 1,\n  //     duration: newProps.duration ?? 1900,\n  //     easing: Easing.linear,\n  //     useNativeDriver: false,\n  //   })\n  // ).start();\n\n  // const styles = StyleSheet.create({\n  //   animateStyle: {\n  //     transform: [\n  //       {\n  //         rotateZ: degree.interpolate({\n  //           inputRange: [0, 1],\n  //           outputRange: ['0deg', '360deg'],\n  //         }),\n  //       },\n  //     ],\n  //   },\n  // });\n  // if (!newProps.variant) {\n  return (\n    <StyledSpinner\n      {...spinnerProps}\n      {...newProps}\n      color={spinnerColor}\n      ref={ref}\n    />\n  );\n  // } else {\n  //   if (newProps.variant === 'custom' && renderProp) {\n  //     return (\n  //       <StyleAnimatedView style={styles.animateStyle}>\n  //         {renderProp}\n  //       </StyleAnimatedView>\n  //     );\n  //   } else {\n  //     let SpinnerVariant = null;\n  //     switch (newProps.variant) {\n  //       case 'dotted':\n  //         SpinnerVariant = (\n  //           <Dotted\n  //             color={spinnerColor}\n  //             size={props.size ? iconSize[props.size] : 12}\n  //           />\n  //         );\n  //         break;\n  //       case 'multiColorDotted':\n  //         SpinnerVariant = (\n  //           <MultiColorDotted\n  //             color={spinnerColor}\n  //             size={props.size ? iconSize[props.size] : 12}\n  //           />\n  //         );\n  //         break;\n  //       case 'stroked':\n  //         SpinnerVariant = (\n  //           <Stroked\n  //             color={spinnerColor}\n  //             size={props.size ? iconSize[props.size] : 12}\n  //           />\n  //         );\n  //         break;\n  //       case 'squareDotted':\n  //         SpinnerVariant = (\n  //           <SquareDotted\n  //             color={spinnerColor}\n  //             size={props.size ? iconSize[props.size] : 12}\n  //           />\n  //         );\n  //         break;\n  //       default:\n  //         SpinnerVariant = (\n  //           <Default\n  //             color={spinnerColor}\n  //             size={props.size ? iconSize[props.size] : 12}\n  //           />\n  //         );\n  //     }\n  //     return (\n  //       <StyleAnimatedView style={styles.animateStyle}>\n  //         {SpinnerVariant}\n  //       </StyleAnimatedView>\n  //     );\n  //   }\n  // }\n};\n\nexport default memo(forwardRef(Spinner));\nexport type { ISpinnerProps };\n"]}