{"version":3,"sources":["Actionsheet.tsx"],"names":["Actionsheet","ref","children","props","isOpen","disableOverlay","onClose","newProps","pan","React","useRef","Animated","ValueXY","current","sheetHeight","useEffect","setTimeout","setValue","x","y","panResponder","PanResponder","create","onMoveShouldSetPanResponder","_evt","gestureState","dx","dy","onPanResponderMove","e","event","onPanResponderRelease","_e","timing","toValue","duration","useNativeDriver","start","spring","overshootClamping","transform","translateY","width","height","nativeEvent","layout","panHandlers"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Modal } from '../../composites/Modal';\nimport type { IActionsheetProps } from './types';\nimport { usePropsResolution } from '../../../hooks';\nimport { Animated, PanResponder } from 'react-native';\n\nconst Actionsheet = ({ children, ...props }: IActionsheetProps, ref: any) => {\n  const { isOpen, disableOverlay, onClose, ...newProps } = usePropsResolution(\n    'Actionsheet',\n    props\n  );\n  let pan = React.useRef(new Animated.ValueXY()).current;\n  let sheetHeight = React.useRef(0);\n\n  React.useEffect(() => {\n    if (!isOpen) {\n      // Reset value when modal close animation is completed\n      setTimeout(() => {\n        pan.setValue({\n          x: 0,\n          y: 0,\n        });\n      }, 250);\n    }\n  }, [isOpen, pan]);\n\n  const panResponder = React.useRef(\n    PanResponder.create({\n      onMoveShouldSetPanResponder: (_evt, gestureState) => {\n        // return true if user is swiping, return false if it's a single click\n        return gestureState.dx !== 0 || gestureState.dy !== 0;\n      },\n      onPanResponderMove: (e, gestureState) => {\n        if (gestureState.dy > 0) {\n          Animated.event([null, { dy: pan.y }])(e, gestureState);\n        }\n      },\n      onPanResponderRelease: (_e, gestureState) => {\n        // If sheet is dragged 1/4th of it's height, close it\n        if (sheetHeight.current / 4 - gestureState.dy < 0) {\n          Animated.timing(pan, {\n            toValue: { x: 0, y: sheetHeight.current },\n            duration: 150,\n            useNativeDriver: true,\n          }).start(() => {\n            onClose();\n          });\n        } else {\n          Animated.spring(pan, {\n            toValue: { x: 0, y: 0 },\n            overshootClamping: true,\n            useNativeDriver: true,\n          }).start();\n        }\n      },\n    })\n  ).current;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      justifyContent=\"flex-end\"\n      //@ts-ignore - internal use only\n      animationPreset=\"slide\"\n      {...newProps}\n      overlayVisible={disableOverlay ? false : true}\n      closeOnOverlayClick={disableOverlay ? false : true}\n      ref={ref}\n    >\n      <Animated.View\n        style={{\n          transform: [{ translateY: pan.y }],\n          width: '100%',\n        }}\n        onLayout={(event) => {\n          const { height } = event.nativeEvent.layout;\n          sheetHeight.current = height;\n        }}\n        {...panResponder.panHandlers}\n      >\n        {children}\n      </Animated.View>\n    </Modal>\n  );\n};\n\nexport default memo(forwardRef(Actionsheet));\n"]}