{"version":3,"sources":["usePropsResolution.tsx"],"names":["simplifyComponentTheme","theme","componentTheme","incomingProps","colorModeProps","currentBreakpoint","combinedProps","defaultProps","componentBaseStyle","baseStyle","variant","componentVariantProps","variants","undefined","size","componentSizeProps","sizes","componentMergedTheme","propTranslator","props","translatedProps","property","startsWith","nestedTranslatedProps","themePropertyMap","propValues","nestedProp","resolveValueWithBreakpointValue","shadow","shadowProps","style","usePropsResolution","component","ignoredProps","cleanIncomingProps","notComponentTheme","windowWidth","width","React","useMemo","breakpoints","componentThemeObject","componentThemeIntegratedProps","platformSpecificProps","bgColor","bg","backgroundColor","contrastTextColor","_text","color","resolvedProps"],"mappings":"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","sourcesContent":["import get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport isNil from 'lodash.isnil';\nimport merge from 'lodash.merge';\nimport { useWindowDimensions } from 'react-native';\nimport { useNativeBase } from '../useNativeBase';\nimport { usePlatformProps } from '../usePlatformProps';\nimport { useColorMode } from '../../core/color-mode';\nimport {\n  resolveValueWithBreakpoint,\n  extractPropertyFromFunction,\n} from './utils';\nimport {\n  getClosestBreakpoint,\n  omitUndefined,\n  extractInObject,\n} from './../../theme/tools';\nimport { themePropertyMap } from './../../theme/base';\nimport { useContrastText } from '../useContrastText';\nimport React from 'react';\n\n/**\n * @summary Resolves, simplify and merge components specific theme.\n * @description The function extract and execute component specifc theme (i.e., `defaultProps`, `baseStyle` and `variants`) and returns a merged and simplified object.\n * @arg {string} theme - Theme object of NativeBase (without component theme).\n * @arg {object} componentTheme - Theme for specific components.\n * @arg {object} incomingProps - Props passed by the user.\n * @arg {object} colorModeProps - `colorMode` object.\n * @returns {object} Resolved component specific theme.\n */\nconst simplifyComponentTheme = (\n  theme: object,\n  componentTheme: {\n    defaultProps?: object;\n    baseStyle?: object | Function;\n    variants?: any | Function;\n    sizes?: any | Function;\n  },\n  incomingProps: object,\n  colorModeProps: object,\n  currentBreakpoint: number\n) => {\n  // Resolving component's defaultProps.\n\n  const combinedProps: any = {\n    ...componentTheme.defaultProps,\n    ...incomingProps,\n  };\n\n  // Resolving component's baseStyle\n  let componentBaseStyle = {};\n  if (componentTheme.baseStyle) {\n    componentBaseStyle =\n      typeof componentTheme.baseStyle !== 'function'\n        ? componentTheme.baseStyle\n        : componentTheme.baseStyle({\n            theme,\n            ...combinedProps,\n            ...colorModeProps,\n          });\n  }\n\n  const variant = resolveValueWithBreakpoint(\n    combinedProps.variant,\n    currentBreakpoint,\n    'variant'\n  );\n\n  let componentVariantProps = {};\n  // Extracting props from variant\n  if (variant && componentTheme.variants && componentTheme.variants[variant]) {\n    componentVariantProps =\n      typeof componentTheme.variants[variant] !== 'function'\n        ? componentTheme.variants[variant]\n        : componentTheme.variants[variant]({\n            theme,\n            ...combinedProps,\n            ...colorModeProps,\n          });\n\n    // We remove variant from original props if we found it in the componentTheme\n    //@ts-ignore\n    incomingProps.variant = undefined;\n  }\n\n  const size = resolveValueWithBreakpoint(\n    combinedProps.size,\n    currentBreakpoint,\n    'size'\n  );\n\n  let componentSizeProps = {};\n  // Extracting props from size\n  if (size && componentTheme.sizes && componentTheme.sizes[size]) {\n    // Type - sizes: {lg: 1}. Refer icon theme\n    if (\n      typeof componentTheme.sizes[size] === 'string' ||\n      typeof componentTheme.sizes[size] === 'number'\n    ) {\n      //@ts-ignore\n      componentSizeProps.size = componentTheme.sizes[size];\n    }\n    // Type - sizes: (props) => ({lg: {px: 1}}). Refer heading theme\n    else if (typeof componentTheme.sizes[size] === 'function') {\n      componentSizeProps = componentTheme.sizes[size]({\n        theme,\n        ...combinedProps,\n        ...colorModeProps,\n      });\n    }\n    // Type - sizes: {lg: {px: 1}}. Refer button theme\n    else {\n      componentSizeProps = componentTheme.sizes[size];\n    }\n\n    // We remove size from original props if we found it in the componentTheme\n    //@ts-ignore\n    incomingProps.size = undefined;\n  }\n\n  const componentMergedTheme = merge(\n    {},\n    componentTheme.defaultProps,\n    componentBaseStyle,\n    componentVariantProps,\n    componentSizeProps\n  );\n\n  return componentMergedTheme;\n};\n\n/**\n * @summary Translates the prop with it's appropriate value.\n * @description NOTE: Avoid passo  JSX and functions.\n * @arg {any} props - Props object with should be translated.\n * @arg {any} theme - Theme based on which props will be translated.\n * @arg {object} colorModeProps - `colorMode` object.\n * @arg {object} componentTheme - Theme for specific components.\n * @arg {object} windowWidth - Current width of the window / screen.\n * @returns {object} Translated props object.\n */\n// Todo - move responsive calculation in styled system\nconst propTranslator = ({\n  props,\n  theme,\n  colorModeProps,\n  componentTheme,\n  currentBreakpoint,\n}: {\n  props: any;\n  theme: any;\n  colorModeProps: object;\n  componentTheme: object;\n  currentBreakpoint: number;\n}) => {\n  let translatedProps: any = {};\n  for (const property in props) {\n    // STEP 1 - Responsive prop check and resolve\n    if (property.startsWith('_')) {\n      // STEP 1.a - Resolving _ porps\n      const nestedTranslatedProps = propTranslator({\n        props: props[property],\n        theme,\n        colorModeProps,\n        componentTheme,\n        currentBreakpoint,\n      });\n      translatedProps[property] = nestedTranslatedProps;\n    } else if (themePropertyMap[property]) {\n      // STEP 1.b Resolving themed props\n      const propValues = extractPropertyFromFunction(\n        property,\n        props,\n        theme,\n        componentTheme\n      );\n\n      // NOTE: Direct value identified.\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        translatedProps[property] = propValues;\n        // NOTE: Nested object (excluding _props) (To be specific, only for key exist in themePropertyMap)\n      } else if (!isNil(propValues)) {\n        // TODO: This setion new needs to handle stuff differently\n        for (let nestedProp in propValues) {\n          translatedProps[nestedProp] = get(\n            theme,\n            `${themePropertyMap[nestedProp]}.${propValues[nestedProp]}`,\n            propValues[nestedProp]\n          );\n        }\n        delete translatedProps[property];\n        // Manually handeling shadow props (example of Mapped tokens)\n      } else if (property === 'shadow') {\n        const resolveValueWithBreakpointValue = resolveValueWithBreakpoint(\n          props.shadow,\n          currentBreakpoint,\n          property\n        );\n        let shadowProps = theme[themePropertyMap[property]](colorModeProps)[\n          resolveValueWithBreakpointValue\n        ];\n        translatedProps.style = merge({}, shadowProps, props.style);\n        delete translatedProps[property];\n      } else {\n        translatedProps[property] = resolveValueWithBreakpoint(\n          props[property],\n          currentBreakpoint,\n          property\n        );\n      }\n    } else {\n      // STEP 1.d Resolving Direct Values\n      translatedProps[property] = resolveValueWithBreakpoint(\n        props[property],\n        currentBreakpoint,\n        property\n      );\n    }\n  }\n\n  return translatedProps;\n};\n\n/**\n * @summary Combines provided porps with component's theme props and resloves them.\n * @description NOTE: Avoid passing JSX and functions.\n * @arg {string} component - Name of the component.\n * @arg {object} incomingProps - Props passed by the user.\n * @returns {object} Resolved props.\n */\nexport function usePropsResolution(component: string, incomingProps: any) {\n  const [ignoredProps, cleanIncomingProps] = extractInObject(incomingProps, [\n    'children',\n    'onPress',\n    'icon',\n    'onOpen',\n    'onClose',\n  ]);\n  const { theme } = useNativeBase();\n  const colorModeProps = useColorMode();\n\n  const componentTheme = get(theme, `components.${component}`);\n  const notComponentTheme = omit(theme, ['components']);\n  const windowWidth = useWindowDimensions()?.width;\n\n  const currentBreakpoint = React.useMemo(\n    () => getClosestBreakpoint(theme.breakpoints, windowWidth),\n    [windowWidth, theme.breakpoints]\n  );\n\n  const componentThemeObject = simplifyComponentTheme(\n    notComponentTheme,\n    componentTheme,\n    cleanIncomingProps,\n    colorModeProps,\n    currentBreakpoint\n  );\n  const componentThemeIntegratedProps = merge(\n    {},\n    componentThemeObject,\n    cleanIncomingProps\n  );\n  const platformSpecificProps = usePlatformProps(componentThemeIntegratedProps);\n\n  const translatedProps = propTranslator({\n    props: platformSpecificProps,\n    theme: notComponentTheme,\n    colorModeProps,\n    componentTheme,\n    currentBreakpoint,\n  });\n\n  let bgColor =\n    translatedProps.bg ??\n    translatedProps.backgroundColor ??\n    translatedProps.bgColor;\n\n  const contrastTextColor = useContrastText(\n    bgColor,\n    translatedProps?._text?.color\n  );\n\n  translatedProps._text = contrastTextColor\n    ? {\n        color: contrastTextColor,\n        ...translatedProps._text,\n      }\n    : translatedProps._text;\n\n  const resolvedProps = omitUndefined({ ...translatedProps, ...ignoredProps });\n\n  return resolvedProps;\n}\n"]}