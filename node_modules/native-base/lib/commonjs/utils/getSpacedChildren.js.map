{"version":3,"sources":["getSpacedChildren.tsx"],"names":["children","space","axis","reverse","divider","childrenArray","React","Children","toArray","orientation","spaceValue","spacingProp","mx","my","cloneElement","map","child","index","key","length","width","height"],"mappings":"uVAAA,oDACA,yE,oIAae,kBACbA,QADa,CAEbC,KAFa,CAGbC,IAHa,CAIbC,OAJa,CAKbC,OALa,CAML,CACR,GAAIC,CAAAA,aAAa,CAAGC,eAAMC,QAAN,CAAeC,OAAf,CAAuBR,QAAvB,CAApB,CACAK,aAAa,CACXF,OAAO,GAAK,SAAZ,CAAwB,gCAAIE,aAAJ,EAAmBF,OAAnB,EAAxB,CAAuDE,aADzD,CAGA,GAAMI,CAAAA,WAAW,CAAGP,IAAI,GAAK,GAAT,CAAe,UAAf,CAA4B,YAAhD,CAEA,GAAIQ,CAAAA,UAAJ,CACA,GAAI,MAAOT,CAAAA,KAAP,GAAiB,QAArB,CAA+B,CAC7B,OAAQA,KAAR,EACE,IAAK,QAAL,CACES,UAAU,CAAG,CAAb,CACA,MACF,IAAK,KAAL,CACEA,UAAU,CAAG,CAAb,CACA,MACF,IAAK,IAAL,CACEA,UAAU,CAAG,CAAb,CACA,MACF,IAAK,IAAL,CACEA,UAAU,CAAG,CAAb,CACA,MACF,IAAK,IAAL,CACEA,UAAU,CAAG,CAAb,CACA,MACF,IAAK,IAAL,CACEA,UAAU,CAAG,CAAb,CACA,MACF,IAAK,IAAL,CACEA,UAAU,CAAG,CAAb,CACA,MACF,IAAK,KAAL,CACEA,UAAU,CAAG,CAAb,CACA,MAEF,QACEA,UAAU,CAAG,CAAb,CACA,MA5BJ,CA8BD,CA/BD,IA+BO,CACLA,UAAU,CAAGT,KAAb,CACD,CAED,GAAIG,OAAJ,CAAa,CACX,GAAMO,CAAAA,WAAmB,0BACnBT,IAAI,GAAK,GAAT,CAAe,CAAEU,EAAE,CAAEF,UAAN,CAAf,CAAoC,CAAEG,EAAE,CAAEH,UAAN,CADjB,CAAzB,CAIAN,OAAO,CAAGE,eAAMQ,YAAN,CAAmBV,OAAnB,wBACRK,WAAW,CAAXA,WADQ,EAELE,WAFK,EAAV,CAKAN,aAAa,CAAGA,aAAa,CAACU,GAAd,CAAkB,SAACC,KAAD,CAAaC,KAAb,CAA+B,gBAC/D,MACE,8BAAC,cAAD,CAAO,QAAP,EAAgB,GAAG,aAAED,KAAK,CAACE,GAAR,mCAA+BD,KAAlD,6EACGD,KADH,CAEGC,KAAK,CAAGZ,aAAa,CAACc,MAAd,CAAuB,CAA/B,EAAoCf,OAFvC,CADF,CAMD,CAPe,CAAhB,CAQD,CAlBD,IAkBO,CACL,GAAMO,CAAAA,YAAmB,0BACnBT,IAAI,GAAK,GAAT,CAAe,CAAEkB,KAAK,CAAEV,UAAT,CAAf,CAAuC,CAAEW,MAAM,CAAEX,UAAV,CADpB,CAAzB,CAGAL,aAAa,CAAGA,aAAa,CAACU,GAAd,CAAkB,SAACC,KAAD,CAAaC,KAAb,CAA+B,iBAC/D,MACE,8BAAC,cAAD,CAAO,QAAP,EAAgB,GAAG,cAAED,KAAK,CAACE,GAAR,oCAA+BD,KAAlD,6EACGD,KADH,CAEGC,KAAK,CAAGZ,aAAa,CAACc,MAAd,CAAuB,CAA/B,EAAoC,6BAAC,YAAD,0BAASR,YAAT,gFAFvC,CADF,CAMD,CAPe,CAAhB,CAQD,CAED,MAAON,CAAAA,aAAP,CACD,C","sourcesContent":["import React from 'react';\nimport { default as Box } from '../components/primitives/Box';\n\ntype SpaceType =\n  | 'gutter'\n  | '2xs'\n  | 'xs'\n  | 'sm'\n  | 'md'\n  | 'lg'\n  | 'xl'\n  | '2xl'\n  | number;\n\nexport default (\n  children: JSX.Element[] | JSX.Element,\n  space: undefined | SpaceType,\n  axis: 'X' | 'Y',\n  reverse: string,\n  divider: JSX.Element | undefined\n): any => {\n  let childrenArray = React.Children.toArray(children);\n  childrenArray =\n    reverse === 'reverse' ? [...childrenArray].reverse() : childrenArray;\n\n  const orientation = axis === 'X' ? 'vertical' : 'horizontal';\n\n  let spaceValue;\n  if (typeof space === 'string') {\n    switch (space) {\n      case 'gutter':\n        spaceValue = 0;\n        break;\n      case '2xs':\n        spaceValue = 1;\n        break;\n      case 'xs':\n        spaceValue = 2;\n        break;\n      case 'sm':\n        spaceValue = 3;\n        break;\n      case 'md':\n        spaceValue = 4;\n        break;\n      case 'lg':\n        spaceValue = 6;\n        break;\n      case 'xl':\n        spaceValue = 7;\n        break;\n      case '2xl':\n        spaceValue = 8;\n        break;\n\n      default:\n        spaceValue = 1;\n        break;\n    }\n  } else {\n    spaceValue = space;\n  }\n  // If there's a divider, we wrap it with a Box and apply vertical and horizontal margins else we add a spacer Box with height or width\n  if (divider) {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { mx: spaceValue } : { my: spaceValue }),\n    };\n\n    divider = React.cloneElement(divider, {\n      orientation,\n      ...spacingProp,\n    });\n\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {index < childrenArray.length - 1 && divider}\n        </React.Fragment>\n      );\n    });\n  } else {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { width: spaceValue } : { height: spaceValue }),\n    };\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {index < childrenArray.length - 1 && <Box {...spacingProp} />}\n        </React.Fragment>\n      );\n    });\n  }\n\n  return childrenArray;\n};\n"]}