{"version":3,"sources":["Transition.tsx"],"names":["transformStylesMap","translateY","translateX","scale","scaleX","scaleY","rotate","defaultStyles","opacity","getAnimatedStyles","animateValue","initial","to","styles","transform","key","push","interpolate","inputRange","outputRange","defaultTransitionConfig","type","useNativeDriver","duration","defaultEntryTransition","defaultExitTransition","Transition","ref","children","onTransitionComplete","visible","entry","exit","style","React","useRef","Animated","Value","current","useState","animationState","setAnimationState","prevVisible","useEffect","entryTransition","transition","toValue","start","exitTransition"],"mappings":"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","sourcesContent":["import React, { forwardRef } from 'react';\nimport { Animated, ViewProps } from 'react-native';\n\ntype ISupportedTransitions = {\n  opacity?: number;\n  translateY?: number;\n  translateX?: number;\n  scale?: number;\n  scaleX?: number;\n  scaleY?: number;\n  rotate?: string;\n};\n\nconst transformStylesMap = {\n  translateY: true,\n  translateX: true,\n  scale: true,\n  scaleX: true,\n  scaleY: true,\n  rotate: true,\n};\n\nconst defaultStyles = {\n  opacity: 1,\n  translateY: 0,\n  translateX: 0,\n  scale: 1,\n  scaleX: 1,\n  scaleY: 1,\n  rotate: '0deg',\n};\n\ntype ITransitionConfig = {\n  type?: 'spring' | 'timing';\n  [key: string]: any;\n};\n\ninterface ITransitionProps extends ViewProps {\n  onTransitionComplete?: (s: 'entered' | 'exited') => void;\n  initial: ISupportedTransitions;\n  entry: ISupportedTransitions & { transition?: ITransitionConfig };\n  exit: ISupportedTransitions & { transition?: ITransitionConfig };\n  children?: any;\n  visible?: boolean;\n}\n\nconst getAnimatedStyles = (animateValue: any) => (\n  initial: ISupportedTransitions,\n  to: ISupportedTransitions\n) => {\n  const styles: any = {\n    transform: [],\n  };\n\n  for (let key in initial) {\n    if (key === 'transition') {\n      continue;\n    }\n\n    if (key in transformStylesMap) {\n      styles.transform?.push({\n        [key]: animateValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [(initial as any)[key], (to as any)[key]],\n        }),\n      } as any);\n    } else {\n      styles[key] = animateValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [(initial as any)[key], (to as any)[key]],\n      });\n    }\n  }\n\n  return styles;\n};\n\nconst defaultTransitionConfig: ITransitionConfig = {\n  type: 'timing',\n  useNativeDriver: true,\n  duration: 200,\n};\n\nconst defaultEntryTransition = { ...defaultTransitionConfig, duration: 250 };\nconst defaultExitTransition = { ...defaultTransitionConfig, duration: 200 };\n\nexport const Transition = forwardRef(\n  (\n    {\n      children,\n      onTransitionComplete,\n      visible = false,\n      initial,\n      entry,\n      exit,\n      style,\n    }: ITransitionProps,\n    ref: any\n  ) => {\n    const animateValue = React.useRef(new Animated.Value(0)).current;\n\n    const [animationState, setAnimationState] = React.useState(\n      visible ? 'entering' : 'exited'\n    );\n\n    const prevVisible = React.useRef(visible);\n\n    React.useEffect(() => {\n      const entryTransition = {\n        ...defaultEntryTransition,\n        ...entry?.transition,\n      };\n\n      if (visible) {\n        Animated[entryTransition.type ?? 'timing'](animateValue, {\n          toValue: 1,\n          useNativeDriver: true,\n          ...entryTransition,\n        }).start(() => {\n          onTransitionComplete && onTransitionComplete('entered');\n          setAnimationState('entered');\n        });\n      }\n    }, [visible, onTransitionComplete, animateValue, entry]);\n\n    React.useEffect(() => {\n      // Exit request\n      if (prevVisible.current !== visible && !visible) {\n        setAnimationState('exiting');\n      }\n      prevVisible.current = visible;\n    }, [visible]);\n\n    React.useEffect(() => {\n      const exitTransition = {\n        ...defaultExitTransition,\n        ...exit?.transition,\n      };\n\n      if (animationState === 'exiting') {\n        Animated[exitTransition.type ?? 'timing'](animateValue, {\n          toValue: 0,\n          useNativeDriver: true,\n          ...exitTransition,\n        }).start(() => {\n          onTransitionComplete && onTransitionComplete('exited');\n          setAnimationState('exited');\n        });\n      }\n    }, [\n      exit,\n      onTransitionComplete,\n      setAnimationState,\n      animationState,\n      animateValue,\n    ]);\n\n    if (!visible && animationState === 'exited') {\n      return null;\n    }\n\n    // If exit animation is present and state is exiting, we replace 'initial' with 'exit' animation\n    initial =\n      animationState === 'exiting' && exit\n        ? { ...defaultStyles, ...exit }\n        : { ...defaultStyles, ...initial };\n\n    entry = { ...defaultStyles, ...entry };\n\n    return (\n      <Animated.View\n        pointerEvents=\"box-none\"\n        // https://github.com/facebook/react-native/issues/23090#issuecomment-710803743\n        needsOffscreenAlphaCompositing\n        style={[getAnimatedStyles(animateValue)(initial, entry), style]}\n        ref={ref}\n      >\n        {children}\n      </Animated.View>\n    );\n  }\n);\n"]}