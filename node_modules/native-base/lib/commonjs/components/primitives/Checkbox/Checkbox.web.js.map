{"version":3,"sources":["Checkbox.web.tsx"],"names":["Checkbox","ref","children","icon","wrapperRef","props","formControlContext","checkboxGroupContext","React","useContext","CheckboxGroupContext","_interactionBox","_iterationBoxHover","_hover","_iterationBoxFocus","_focus","_iterationBoxDisabled","_disabled","_checkbox","_checkboxChecked","_checked","_checkboxDisabled","_checkboxInvalid","_invalid","_icon","isInvalid","iconSize","themedProps","_ref","useRef","mergedRef","state","defaultSelected","defaultIsChecked","isSelected","isChecked","groupState","isHovered","value","inputProps","checked","disabled","sizedIcon","cloneElement","focusProps","isFocusVisible","component","transition"],"mappings":"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","sourcesContent":["import React, { useContext, memo, forwardRef } from 'react';\nimport { mergeRefs } from './../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CheckIcon } from '../Icon/Icons';\n\nconst Checkbox = (\n  { children, icon, wrapperRef, ...props }: ICheckboxProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  const {\n    _interactionBox: {\n      _hover: _iterationBoxHover,\n      _focus: _iterationBoxFocus,\n      _disabled: _iterationBoxDisabled,\n      ..._interactionBox\n    },\n    _checkbox: {\n      _checked: _checkboxChecked,\n      _disabled: _checkboxDisabled,\n      _invalid: _checkboxInvalid,\n      ..._checkbox\n    },\n    _icon,\n    isInvalid,\n    iconSize,\n    ...themedProps\n  } = usePropsResolution('Checkbox', {\n    ...checkboxGroupContext,\n    ...formControlContext,\n    ...props,\n  });\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n  const state = useToggleState({\n    ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked,\n  });\n  const groupState = useContext(CheckboxGroupContext);\n  const { isHovered } = useHover({}, _ref);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps } = groupState\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...themedProps,\n          value: themedProps.value,\n        },\n        groupState.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        themedProps,\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  const { checked, disabled } = inputProps;\n\n  const sizedIcon = icon\n    ? () =>\n        React.cloneElement(\n          icon,\n          {\n            iconSize,\n            ..._icon,\n          },\n          icon.props.children\n        )\n    : null;\n  const { focusProps, isFocusVisible } = useFocusRing();\n\n  const component = (\n    <Box\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      {...themedProps}\n      opacity={disabled ? 0.4 : 1}\n      cursor={disabled ? 'not-allowed' : 'pointer'}\n    >\n      <Center>\n        {/* Interaction Box */}\n        <Box\n          {..._interactionBox}\n          {...(isFocusVisible && _iterationBoxFocus)}\n          {...(isHovered && _iterationBoxHover)}\n          {...(disabled && _iterationBoxDisabled)}\n          {...(disabled && _iterationBoxDisabled)}\n          style={{\n            // @ts-ignore - only for web\"\n            transition: 'height 200ms, width 200ms',\n          }}\n          h={isFocusVisible || isHovered ? '200%' : '100%'}\n          w={isFocusVisible || isHovered ? '200%' : '100%'}\n          zIndex={-1}\n        />\n        {/* Checkbox */}\n        <Center\n          {..._checkbox}\n          {...(checked && _checkboxChecked)}\n          {...(disabled && _checkboxDisabled)}\n          {...(isInvalid && _checkboxInvalid)}\n        >\n          {icon && sizedIcon && checked ? (\n            sizedIcon()\n          ) : (\n            <CheckIcon\n              name=\"check\"\n              {..._icon}\n              size={iconSize}\n              opacity={checked ? 1 : 0}\n            />\n          )}\n        </Center>\n      </Center>\n      {children}\n    </Box>\n  );\n\n  return (\n    <Box\n      // @ts-ignore - RN web supports accessibilityRole=\"label\"\n      accessibilityRole=\"label\"\n      ref={mergeRefs([wrapperRef, _ref])}\n    >\n      <VisuallyHidden>\n        <input {...inputProps} {...focusProps} ref={mergedRef} />\n      </VisuallyHidden>\n\n      {component}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Checkbox));\n"]}